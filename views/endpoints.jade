header.page-header
  h1 Instagram API Endpoints

p Once you've <a href="#">registered your client</a> it's easy to start requesting data from Instagram.

p All endpoints are only accessible via https and are located at api.instagram.com. For instance: you can grab the most popular photos at the moment by accessing the following URL with your client ID (replace CLIENT-ID with your own):

pre: code https://api.instagram.com/v1/media/popular?client_id=CLIENT-ID

p You're best off using an access_token for the authenticated user for each endpoint, though many endpoints don't require it. In some cases an access_token will give you more access to information, and in all cases, it means that you are operating under a per-access_token limit vs. the same limit for your single client_id.

.alert
  h4 Important Notice
  p The URL examples throughout this documentation include an access_token that represents YOUR account tied to a generic Instagram client. <strong>DO NOT use this access_token in production or for anything other than testing as they will change often.</strong> For your application, you should have each user go through an <a href="#">authentication and authorization</a> flow in order to receive a valid access_token.

h2 Limits
p Be nice. If you're sending too many requests too quickly, we'll send back a 503 error code (server unavailable).

p You are limited to 5000 requests per hour per access_token or client_id overall. Practically, this means you should (when possible) authenticate users so that limits are well outside the reach of a given user.

hr

h2 Deleting Objects
p We do our best to have all our URLs be <a href="#">RESTful</a>. Every endpoint (URL) may support one of four different http verbs. GET requests fetch information about an object, POST requests create objects, PUT requests update objects, and finally DELETE requests will delete objects.

p Since many old browsers don't support PUT or DELETE, we've made it easy to fake PUTs and DELETEs. All you have to do is do a POST with _method=PUT or _method=DELETE as a parameter and we will treat it as if you used PUT or DELETE respectively.

hr

h2 Structure
h3 The envelope
p Every response is contained by an envelope. That is, each response has a predictable set of keys with which you can expect to interact:
pre: code.
  {
      "meta": {
          "code": 200
      },
      "data": {
          ...
      },
      "pagination": {
          "next_url": "...",
          "next_max_id": "13872296"
      }
  }
h4 Meta
p The meta key is used to communicate extra information about the response to the developer. If all goes well, you'll only ever see a code key with value 200. However, sometimes things go wrong, and in that case you might see a response like:
pre: code.
  {
      "meta": {
          "error_type": "OAuthException",
          "code": 400,
          "error_message": "..."
      }
  }

h4 Data
p The data key is the meat of the response. It may be a list or dictionary, but either way this is where you'll find the data you requested.

h4 Pagination
p Sometimes you just can't get enough. For this reason, we've provided a convenient way to access more data in any request for sequential data. Simply call the url in the next_url parameter and we'll respond with the next set of data.
pre: code.
  {
      ...
      "pagination": {
          "next_url": "https://api.instagram.com/v1/tags/puppy/media/recent?access_token=fb2e77d.47a0479900504cb3ab4a1f626d174d2d&max_id=13872296",
          "next_max_id": "13872296"
      }
  }
p On views where pagination is present, we also support the "count" parameter. Simply set this to the number of items you'd like to receive. Note that the default values should be fine for most applications - but if you decide to increase this number there is a maximum value defined on each endpoint.

hr

h2 JSONP
p If you're writing an AJAX application, and you'd like to wrap our response with a callback, all you have to do is specify a callback parameter with any API call:
pre: code https://api.instagram.com/v1/tags/coffee/media/recent?access_token=fb2e77d.47a0479900504cb3ab4a1f626d174d2d&callback=callbackFunction

p Would respond with:
pre: code.
  callbackFunction({
      ...
  });